// Mocks generated by Mockito 5.4.5 from annotations
// in pin_app_challenge/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pin_app_challenge/domain/entities/post.dart' as _i4;
import 'package:pin_app_challenge/domain/repositories/post_repository.dart'
    as _i2;
import 'package:pin_app_challenge/domain/usescases/get_posts.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostRepository_0 extends _i1.SmartFake
    implements _i2.PostRepository {
  _FakePostRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i2.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.PostEntity>> getPosts() =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, []),
            returnValue: _i3.Future<List<_i4.PostEntity>>.value(
              <_i4.PostEntity>[],
            ),
          )
          as _i3.Future<List<_i4.PostEntity>>);
}

/// A class which mocks [GetPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPosts extends _i1.Mock implements _i5.GetPosts {
  MockGetPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakePostRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.PostRepository);

  @override
  _i3.Future<List<_i4.PostEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<List<_i4.PostEntity>>.value(
              <_i4.PostEntity>[],
            ),
          )
          as _i3.Future<List<_i4.PostEntity>>);
}
